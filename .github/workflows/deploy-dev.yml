name: Deploy to DEV

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Load environment variables from .env.dev into the GitHub Actions runtime.
      - name: Load .env.dev
        run: |
          if [ -f .env.dev ]; then
            echo "Loading .env.dev file into environment variables"
            cat .env.dev >> $GITHUB_ENV
          else
            echo ".env.dev file not found!"
            exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.0"  # adjust as needed

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        run: terraform plan \
            -var "aws_region=${{ env.AWS_REGION }}" \
            -var "availability_zones=${{ env.AVAILABILITY_ZONES }}" \
            -var "allowed_cidrs=${{ env.ALLOWED_CIDRS }}" \
            -var "db_name=${{ env.DB_NAME }}" \
            -var "db_username=${{ env.DB_USERNAME }}" \
            -var "db_password=${{ env.DB_PASSWORD }}" \
            -var "ssm_db_name=${{ env.SSM_DB_NAME }}" \
            -var "ssm_db_username=${{ env.SSM_DB_USERNAME }}" \
            -var "ssm_db_password=${{ env.SSM_DB_PASSWORD }}" \
            -var "ssm_db_host=${{ env.SSM_DB_HOST }}" \
            -var "ssm_db_port=${{ env.SSM_DB_PORT }}" \
            -var "s3_bucket_name=${{ env.S3_BUCKET_NAME }}" \
            -var "ssm_cognito_user_pool_id=${{ env.SSM_COGNITO_USER_POOL_ID }}" \
            -var "ssm_cognito_client_id=${{ env.SSM_COGNITO_CLIENT_ID }}" \
            -var "ssm_redis_endpoint=${{ env.SSM_REDIS_ENDPOINT }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Create .env.dev file for Docker
        run: |
          cat <<EOF > .env.dev
          AWS_REGION=${{ env.AWS_REGION }}
          AVAILABILITY_ZONES=${{ env.AVAILABILITY_ZONES }}
          ALLOWED_CIDRS=${{ env.ALLOWED_CIDRS }}
          DB_NAME=${{ env.DB_NAME }}
          DB_USERNAME=${{ env.DB_USERNAME }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          SSM_DB_NAME=${{ env.SSM_DB_NAME }}
          SSM_DB_USERNAME=${{ env.SSM_DB_USERNAME }}
          SSM_DB_PASSWORD=${{ env.SSM_DB_PASSWORD }}
          SSM_DB_HOST=${{ env.SSM_DB_HOST }}
          SSM_DB_PORT=${{ env.SSM_DB_PORT }}
          S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}
          SSM_COGNITO_USER_POOL_ID=${{ env.SSM_COGNITO_USER_POOL_ID }}
          SSM_COGNITO_CLIENT_ID=${{ env.SSM_COGNITO_CLIENT_ID }}
          SSM_REDIS_ENDPOINT=${{ env.SSM_REDIS_ENDPOINT }}
          EOF

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:latest .

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
